apiVersion: v1
kind: Namespace
metadata:
  name: asteroid
  labels:
    name: asteroid
---
apiVersion: v1
kind: Namespace
metadata:
  name: apps
  labels:
    name: apps
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: latest
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: latest
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: latest
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-app-pods
  namespace: apps
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "get", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-app-pods
  namespace: apps
subjects:
- kind: ServiceAccount
  name: default
  namespace: default # TODO(cjihrig): Use asteroid namespace.
roleRef:
  kind: Role
  name: manage-app-pods
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: internet-and-dns-only-egress
  namespace: apps
spec:
  policyTypes:
    - Egress
  podSelector: {}
  egress:
    - to:
        - ipBlock:
            # allow all IPs
            cidr: 0.0.0.0/0
            except:
              # https://en.wikipedia.org/wiki/Private_network
              - 10.0.0.0/8
              - 192.168.0.0/16
              - 172.16.0.0/20
    - to:
      - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: kube-system
        podSelector:
          matchLabels:
            k8s-app: kube-dns
      ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
    # TODO(cjihrig): This rule is specific to minikube.
    - to:
      - namespaceSelector:
          matchLabels:
            # kubernetes.io/metadata.name: asteroid
            kubernetes.io/metadata.name: default
        podSelector:
          matchLabels:
            app: asteroid-minio
      ports:
        - port: 9000
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  # namespace: asteroid
spec:
  type: LoadBalancer
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
  # namespace: asteroid
  labels:
    app: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        # TODO(cjihrig): Change the name of the image.
        image: asteroid-gateway
        # TODO(cjihrig): Change this when not using minikube.
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  # namespace: asteroid
spec:
  type: LoadBalancer
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 6000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  # namespace: asteroid
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        # TODO(cjihrig): Change the name of the image.
        image: asteroid-api
        # TODO(cjihrig): Change this when not using minikube.
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: asteroid-postgres-config
  labels:
    app: asteroid-postgres
data:
  POSTGRES_DB: asteroid
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: asteroid-postgres
  # namespace: asteroid
spec:
  replicas: 3
  selector:
    matchLabels:
      app: asteroid-postgres
  template:
    metadata:
      labels:
        app: asteroid-postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.1
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: asteroid-postgres-config
          # volumeMounts:
          #   - mountPath: /var/lib/postgresql/data
          #     name: postgredb
      # volumes:
      #   - name: postgredb
      #     persistentVolumeClaim:
      #       claimName: postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: asteroid-postgres-service
  labels:
    app: asteroid-postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: asteroid-postgres









---
apiVersion: v1
kind: Service
metadata:
  name: asteroid-minio-service
  # namespace: asteroid
spec:
  selector:
    app: asteroid-minio
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: asteroid-minio
  name: asteroid-minio
  # namespace: asteroid
spec:
  containers:
  - name: minio
    image: quay.io/minio/minio:latest
    imagePullPolicy: "IfNotPresent"
    command:
    - /bin/bash
    - -c
    args:
    - minio server /data --console-address :9090
    # volumeMounts:
    # - mountPath: /data
    #   name: localvolume # Corresponds to the `spec.volumes` Persistent Volume
  # nodeSelector:
  #   kubernetes.io/hostname: kubealpha.local # Specify a node label associated to the Worker Node on which you want to deploy the pod.
  # volumes:
  # - name: localvolume
  #   hostPath: # MinIO generally recommends using locally-attached volumes
  #     path: /mnt/disk1/data # Specify a path to a local drive or volume on the Kubernetes worker node
  #     type: DirectoryOrCreate # The path to the last directory must exist
